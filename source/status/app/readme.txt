# Папка status/app

Содержит основной код веб-приложения Flask, отвечающего за API и веб-интерфейс
системы мониторинга.

## Содержимое:

- `__init__.py`: Маркер пакета Python.
- `app.py`: Точка входа Flask-приложения. Создает экземпляр `Flask`,
  инициализирует маршруты из `routes.py` и содержит базовую конфигурацию
  логирования. Может быть запущен напрямую (`python app.py`) для разработки
  или через WSGI-сервер (например, Gunicorn) в production.
- `db.py`: Модуль для взаимодействия с базой данных PostgreSQL. Содержит
  функции для установки соединения (`get_db_connection`), получения
  обработанных данных о статусах узлов (`fetch_all_node_data_with_status`),
  группах (`fetch_group_data`), системных событиях (`fetch_system_events`),
  статусах заданий (`fetch_assignments_status_for_node`) и деталях проверок
  (`fetch_check_details`). Использует `psycopg2`.
- `routes.py`: Определяет все маршруты веб-приложения:
  - HTML-страницы (`/`, `/status`, `/events`).
  - API эндпоинты версии 1 (`/api/v1/...`) для получения данных фронтендом
    (dashboard, detailed status, events, assignments status, check details),
    генерации конфигурации для оффлайн-агента и получения заданий для
    онлайн-агента.
  - API эндпоинт `/api/checks` (POST) для приема результатов проверок от агентов
    (с обязательным `assignment_id`).
  - API эндпоинт `/api/v1/events` (POST) для записи системных событий.
- `static/`: Папка для статических файлов:
  - `style.css`: Основные стили веб-интерфейса.
  - `icons/`: Папка для SVG-иконок типов узлов (нужно наполнить вручную).
  - `favicon.png`: Иконка сайта (нужно добавить вручную).
- `templates/`: Папка для HTML-шаблонов Jinja2:
  - `base.html`: Базовый шаблон с общей структурой, навигацией и скриптами.
  - `dashboard.html`: Шаблон для страницы сводки.
  - `status_detailed.html`: Шаблон для страницы детального статуса узлов
    (включает модальное окно для заданий).
  - `system_events.html`: Шаблон для страницы системных событий с фильтрами.

## Принцип работы:

Flask-приложение (`app.py`) обрабатывает HTTP-запросы.
- Запросы к HTML-страницам рендерятся с помощью шаблонов из папки `templates`.
- Запросы к API обрабатываются в `routes.py`, который вызывает функции из `db.py`
  для взаимодействия с базой данных и возвращает данные в формате JSON.
- JavaScript в HTML-шаблонах динамически запрашивает данные у API и обновляет
  содержимое страниц без полной перезагрузки.
- Статические файлы (CSS, JS, изображения) раздаются из папки `static`.
  В production рекомендуется настроить Nginx для более эффективной раздачи статики.
