
---

**2. `postgres/README.md` (Замена существующего)**

```markdown
# База Данных PostgreSQL для Status Monitor

Эта папка содержит все необходимое для развертывания и инициализации базы данных PostgreSQL, используемой проектом Status Monitor.

## Назначение

База данных хранит всю конфигурационную информацию системы, а также историю результатов мониторинга и системных событий. Сюда входят:

*   Структура подразделений (`subdivisions`)
*   Информация об узлах мониторинга (`nodes`)
*   Типы узлов и их свойства (`node_types`, `node_property_types`, `node_properties`)
*   Методы проверок (`check_methods`)
*   Задания на проверку (`node_check_assignments`)
*   История результатов проверок (`node_checks`)
*   Детализированные результаты проверок (`node_check_details`)
*   Системные события (`system_events`)
*   Пользователи веб-интерфейса (`users`)
*   API ключи и их роли (`api_keys`)
*   Версии оффлайн-конфигураций (`offline_config_versions`)
*   Глобальные настройки (`settings`)

## Содержимое папки

*   **`docker-compose.yaml`**:
    *   Определяет сервисы Docker: `postgres` (PostgreSQL 14) и `pgadmin` (pgAdmin 4 - веб-интерфейс для управления БД).
    *   Настраивает переменные окружения для контейнера `postgres`: имя пользователя (`pu_user`), пароль (`pu_password`), имя базы данных (`pu_db`), временную зону (`TZ`).
    *   **Монтирует SQL-скрипты инициализации** из подпапок `db_schema`, `db_core_data` и `db_seed_data` в специальную директорию `/docker-entrypoint-initdb.d/` внутри контейнера `postgres`.
    *   Настраивает сети Docker (`pu_db` - внутренняя, `pu_share` - внешняя для связи с бэкендом).
    *   Пробрасывает порты: PostgreSQL (`5432` -> `48036` на хост), pgAdmin (`80` -> `48035` на хост).
    *   **Управляет сохранением данных PostgreSQL:** содержит закомментированную или отсутствующую секцию `volumes` для `/var/lib/postgresql/data` у сервиса `postgres` и соответствующий `volume` `postgres_data`.
*   **`db_schema/`**:
    *   Содержит SQL-скрипты для создания структуры базы данных: таблицы, индексы, функции, процедуры, представления, внешние ключи. Скрипты именуются с префиксами `01_XXX_...` для контроля порядка выполнения.
*   **`db_core_data/`**:
    *   Содержит SQL-скрипты для заполнения базовых справочников и настроек системы (методы проверок, типы свойств узлов, настройки по умолчанию). Выполняются после создания схемы (префиксы `02_XXX_...`).
*   **`db_seed_data/`**:
    *   Содержит SQL-скрипты для заполнения базы начальными/тестовыми данными (примеры подразделений, узлов, заданий). Выполняются последними (префиксы `03_XXX_...`). Структурированы по подпапкам (`general`, `subdivisions/<CODE>/`).

## Инициализация Базы Данных

При **первом запуске** контейнера `postgres` (когда папка данных PostgreSQL пуста), официальный образ PostgreSQL автоматически выполняет все `.sql`, `.sql.gz`, или `.sh` скрипты, найденные в `/docker-entrypoint-initdb.d/`.

*   Скрипты выполняются в **алфавитном порядке их имен файлов**.
*   Мы используем числовые префиксы (`01_`, `02_`, `03_`) в именах файлов при монтировании в `docker-compose.yaml`, чтобы гарантировать правильный порядок: сначала создается схема, затем заполняются базовые данные, затем - тестовые.

## Сохранение данных (Data Persistence)

**ВАЖНО:** По умолчанию, конфигурация в `docker-compose.yaml` **НЕ СОХРАНЯЕТ** данные PostgreSQL при остановке и удалении контейнеров (`docker-compose down`). Это удобно для разработки и тестирования, но **неприемлемо для реальной эксплуатации**.

Чтобы включить сохранение данных:

1.  Откройте файл `postgres/docker-compose.yaml`.
2.  Найдите секцию `services` -> `postgres` -> `volumes`.
3.  Раскомментируйте или добавьте строку, монтирующую именованный том `postgres_data`:
    ```yaml
    volumes:
      # ... существующие монтирования скриптов ...
      - postgres_data:/var/lib/postgresql/data # <--- РАСКОММЕНТИРОВАТЬ ИЛИ ДОБАВИТЬ
    ```
4.  Найдите секцию `volumes` в конце файла (на одном уровне с `services`, `networks`).
5.  Раскомментируйте или добавьте определение тома `postgres_data`:
    ```yaml
    volumes:
      postgres_data: {} # <--- РАСКОММЕНТИРОВАТЬ ИЛИ ДОБАВИТЬ {} для создания по умолчанию
      pgadmin_data: {} # Том для pgAdmin обычно оставляют
    ```
6.  После этих изменений данные PostgreSQL будут сохраняться в Docker volume `postgres_data` между перезапусками контейнера и даже после `docker-compose down`. Для полного удаления данных нужно будет выполнить `docker-compose down -v`.

## Запуск

1.  Убедитесь, что установлен Docker и Docker Compose.
2.  Убедитесь, что создана внешняя сеть Docker (если еще нет):
    ```bash
    docker network create pu_share
    ```
3.  Перейдите в эту папку (`postgres`) в терминале.
4.  *(Опционально, но рекомендуется для Production)* Включите сохранение данных, как описано выше.
5.  Запустите контейнеры в фоновом режиме:
    ```bash
    docker-compose up -d
    ```
6.  **Остановка контейнеров (с сохранением данных, если volume включен):**
    ```bash
    docker-compose down
    ```
7.  **Остановка контейнеров С УДАЛЕНИЕМ ВСЕХ ДАННЫХ (включая volume `postgres_data`, если он был создан):**
    ```bash
    docker-compose down -v
    ```

## Доступ

*   **PostgreSQL:**
    *   Хост: `localhost` (или IP Docker хоста)
    *   Порт: `48036` (проброшен с внутреннего 5432)
    *   База данных: `pu_db`
    *   Пользователь: `pu_user`
    *   Пароль: `pu_password` (указан в `docker-compose.yaml`)
*   **pgAdmin (Веб-интерфейс):**
    *   URL: `http://localhost:48035` (проброшен с внутреннего 80)
    *   Email для входа: `admin@admin.com`
    *   Пароль для входа: `admin` (указан в `docker-compose.yaml`)
    *   **Примечание:** В pgAdmin необходимо вручную добавить подключение к серверу PostgreSQL. В качестве "Host name/address" можно указать `postgres`, так как pgAdmin и PostgreSQL находятся в одной Docker-сети `pu_db`, либо использовать IP-адрес хоста (`host.docker.internal` для Docker Desktop или IP машины), если подключаетесь "снаружи". Используйте порт `5432` при указании хоста `postgres` или `48036` при подключении к `localhost`.